* Work
** TODO add serial port logging
*** TODO make sure bprintf and serial ports match and can display the bootloader memory map

** TODO refactor interrupts and vga?
Tell the PIC that you no longer want to use the BIOS defaults
Write a couple of ISR handlers (see Interrupt Service Routines) for both IRQs and exceptions
Put the addresses of the ISR handlers in the appropriate descriptors (in Interrupt Descriptor Table)
Enable all supported interrupts in the IRQ mask (of the PIC)

** TODO add paging
*** TODO paging abstraction? might be assembly templates that get procssed, compiled and linked via linker script
*** TODO store GRUB pages and data for initial mapping
*** TODO create and store page table that contains kernel image (data and code)
*** TODO create boot page directory that contains GRUB and kernel pages
*** TODO enable paging (architecture specific)
*** TODO jump to higher half of kernel
*** TODO remove the lower half of the kernel
**** TODO read this https://wiki.osdev.org/Higher_Half_x86_Bare_Bones
** TODO keyboard input and rendering to VGA
*** TODO how to structure this?

** TODO scheduler
*** TODO setup timer abstraction
*** TODO instantiate for x86 using PIT
*** TODO setup scheduler
*** TODO start talking to other CPUs that you can

** TODO userspace shell
*** TODO embed init shell inside kernel
*** TODO ship with pwd, cd

** TODO break these down further
*** TODO replacing paging with VM
*** TODO write clock replacement algorithm that can run on VM
*** TODO compiler that targets VM

* Overview

Yato kernel

Key feature: userspace programmable page eviction, allocation

Key pattern: every device or subsystem is an actor with a queue.
with channels, kernel just acts as a router between channel listeners.
channels mpmc queue. channel stores opaque ids that are readers/writers.
VGA cable acts on VGA_cable channel
VGA cable simply transmits the data it is provided.
Display device is a state machine of frame buffers. Commanded by other processes to send data to cable (GPU will be placed here eventually).
Shell (which can be graphical and or console) manages userspace binaries. Root (first pid).
Shell can be thought of as a process that prepares frame buffers to be rendered (sends commands to display driver to display this data).
TODO: maybe too much abstraction here?
