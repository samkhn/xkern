* TODO refactor: move device_video_console and vga related things into early boot environment under arch/x86/boot
  They do not need to be shipped as the "main" device.

* TODO: setup GDT and interrupt abstraction
* TODO: Make space for the interrupt descriptor table
* TODO: Tell the CPU where that space is
* TODO: Tell the PIC that you no longer want to use the BIOS defaults
* TODO: Write a couple of ISR handlers (see Interrupt Service Routines) for both IRQs and exceptions
* TODO: Put the addresses of the ISR handlers in the appropriate descriptors (in Interrupt Descriptor Table)
* TODO: Enable all supported interrupts in the IRQ mask (of the PIC)

* TODO: paging abstraction? might be assembly templates that get procssed, compiled and linked via linker script
* TODO read this https://wiki.osdev.org/Higher_Half_x86_Bare_Bones
* TODO: store GRUB pages and data for initial mapping
* TODO: create and store page table that contains kernel image (data and code)
* TODO: create boot page directory that contains GRUB and kernel pages
* TODO: enable paging (architecture specific)
* TODO: jump to higher half of kernel
* TODO: remove the lower half of the kernel

* TODO: split VGA driver into display device driver with VGA output and Console driver
* TODO: implement printing integers and floating point numbers (printf)
* TODO: implement scrolling and a cursor for the console
* TODO(main): print ACPI table of all the devices the kernel can see

Key pattern: every device or subsystem is an actor with a queue.
with channels, kernel just acts as a router between channel listeners.
channels mpmc queue. channel stores opaque ids that are readers/writers.
VGA cable acts on VGA_cable channel
VGA cable simply transmits the data it is provided.
Display device is a state machine of frame buffers. Commanded by other processes to send data to cable (GPU will be placed here eventually).
Shell (which can be graphical and or console) manages userspace binaries. Root (first pid).
Shell can be thought of as a process that prepares frame buffers to be rendered (sends commands to display driver to display this data).
TODO: maybe too much abstraction here?

Not sure about these:
* TODO: setup timer abstraction
** TODO: instantiate for x86 using PIT
* TODO: setup scheduler
** TODO: start talking to other CPUs that you can

-----

Keyboard presses enter, triggers interrupt, invokes interrupt handle of shell. How can we do this?
